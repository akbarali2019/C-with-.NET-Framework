using Google.Cloud.Firestore.V1;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Google.Cloud.Firestore;
using System.Collections;
using Google.Type;
using Newtonsoft.Json.Linq;

namespace CloudFireEng
{
    
    public partial class Form1 : Form
    {
        FirestoreDb database;
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + @"cloudfire.json";
            Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", path);

            database = FirestoreDb.Create("cloudfire-a0cd4");
            //MessageBox.Show("successful");
        }

        private void button1_Click(object sender, EventArgs e)
        {
            //Add_Document_with_AutoID();
            //Add_Document_with_CustomID();
            //Add_Array();
            //Add_List();


            //Get_Data();
            //Get_Specific_Data();
            //Get_All_CollectionData();
            Get_Capitals_CollectionData();
        }

        async void Get_Data()
        {
            DocumentReference docref = database.Collection("MyCities").Document("Andijan");
            DocumentSnapshot snap = await docref.GetSnapshotAsync();

            if (snap.Exists)
            {
                Dictionary<string, object> city = snap.ToDictionary();

                foreach (var item in city)
                {
                    richTextBox1.Text += string.Format("{0}: {1}\n", item.Key, item.Value);
                }
            }
        }

        
        async void Get_Specific_Data()
        {
            DocumentReference docref = database.Collection("MyCities").Document("Andijan");
            DocumentSnapshot snap = await docref.GetSnapshotAsync();

            if (snap.Exists)
            {
                City city = snap.ConvertTo<City>();

                provinceTbox.Text = city.Province;
                isCapitalTBox.Text = IsProvinceCapital(city.isCapital);
                populationTBox.Text = city.Population.ToString();
            }
        }
    

        async void Get_All_CollectionData()
        {
            Query qref = database.Collection("MyCities");
            QuerySnapshot snap = await qref.GetSnapshotAsync();


            foreach (DocumentSnapshot docsnap in snap)
            {
                City city = docsnap.ConvertTo<City>();

                if (docsnap.Exists)
                {
                    richTextBox1.Text += "[City Name: " + docsnap.Id + "]\n";
                    richTextBox1.Text += city.Province+"\n";
                    richTextBox1.Text += IsProvinceCapital(city.isCapital) + "\n";
                    richTextBox1.Text += city.Population.ToString() + "\n";
                    richTextBox1.Text += "\n";
                }
            }           
        }


        async void Get_Capitals_CollectionData()
        {
            Query qref = database.Collection("MyCities").WhereEqualTo("isCapital", true);
            QuerySnapshot snap = await qref.GetSnapshotAsync();


            foreach (DocumentSnapshot docsnap in snap)
            {
                City city = docsnap.ConvertTo<City>();

                if (docsnap.Exists)
                {
                    richTextBox1.Text += "[City Name: " + docsnap.Id + "]\n";
                    richTextBox1.Text += city.Province + "\n";
                    richTextBox1.Text += IsProvinceCapital(city.isCapital) + "\n";
                    richTextBox1.Text += city.Population.ToString() + "\n";
                    richTextBox1.Text += "\n";
                }
            }
        }

        string IsProvinceCapital(bool isCAP)
        {
            if (isCAP) return "YES!";
            return "NO!";
        }

        void Add_Document_with_AutoID()
        {
            CollectionReference coll = database.Collection("Add_Document_with_AutoID");
            Dictionary<string, object> data1 = new Dictionary<string, object>()
            {
                {"FirstName", "Bobur" },
                {"LastName", "Boburxanov" },
                {"PhoneNumber", 123456789 }
            };
            coll.AddAsync(data1);
            MessageBox.Show("Added Successfully");
        }

        void Add_Document_with_CustomID()
        {
            DocumentReference doc = database.Collection("Add_Document_with_CustomID").Document("firstDoc");
            Dictionary<string, object> data1 = new Dictionary<string, object>()
            {
                {"FirstName", "Bobur" },
                {"LastName", "Boburxanov" },
                {"PhoneNumber", 123456789 }
            };
            doc.SetAsync(data1);
            MessageBox.Show("Added Successfully");
        }

        void Add_Array()
        {
            DocumentReference doc = database.Collection("Add_Array").Document("firstArray");
            Dictionary<string, object> data1 = new Dictionary<string, object>();

            ArrayList myArray = new ArrayList();
            myArray.Add(123);
            myArray.Add("name");
            myArray.Add(true);

            data1.Add("myArray", myArray);

            doc.SetAsync(data1);
            MessageBox.Show("Added Successfully");
        }

        void Add_List()
        {
            DocumentReference doc = database.Collection("Add_List").Document("firstList");
          
            Dictionary<string, object> myList = new Dictionary<string, object>();
            

            Dictionary<string, object> list1 = new Dictionary<string, object>()
            {
                {"FirstName", "Bobur" },
                {"LastName", "Boburxanov" },
                {"PhoneNumber", 123456789 },
            };

            myList.Add("myList", list1);
            

            doc.SetAsync(myList);
            
            MessageBox.Show("Added Successfully");
        }

        private void richTextBox1_TextChanged(object sender, EventArgs e)
        {

        }


        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }
        /////////////////////How to replace and delete fields of the document in the collection//////
        ///

        async void Replace_All()
        {
            DocumentReference docref = database.Collection("MyCities").Document("Andijan");
            Dictionary<string, object> data = new Dictionary<string, object>()
            {
                {"name", "Samarkand" },
                {"specializedField", "Tourism" }

            };

            DocumentSnapshot snap = await docref.GetSnapshotAsync();
            if (snap.Exists)
            {
                await docref.SetAsync(data);
            }
        }

        async void Update_Field()
        {
            DocumentReference docref = database.Collection("MyCities").Document("Andijan");
            Dictionary<string, object> data = new Dictionary<string, object>()
            {
                //{"name", "Samarkand" },
                //{"specializedField", "Tourism - Registan Square" }
                {"population", 4200000 }

            };

            DocumentSnapshot snap = await docref.GetSnapshotAsync();
            if (snap.Exists)
            {
                await docref.UpdateAsync(data);
            }
        }


        async void Update_List_or_Nested_Elements()
        {
            DocumentReference docref = database.Collection("Add_List").Document("firstList");
            Dictionary<string, object> data = new Dictionary<string, object>()
            {
                //{"name", "Samarkand" },
                //{"specializedField", "Tourism - Registan Square" }
                {"myList.LastName", "Boburxanov Nodir Ugli" },
                {"myList.Address", "Namangan, Uzbekistan" }

            };

            DocumentSnapshot snap = await docref.GetSnapshotAsync();
            if (snap.Exists)
            {
                await docref.UpdateAsync(data);
            }
        }

        async void Update_Array()
        {
            DocumentReference docref = database.Collection("Add_Array").Document("firstArray");
            DocumentSnapshot snap = await docref.GetSnapshotAsync();

            if (snap.Exists)
            {
                await docref.UpdateAsync("myArray", FieldValue.ArrayUnion("abcd", 456));
            }
        }

        void Delete_EntireDocument()
        {
            DocumentReference docref = database.Collection("MyCities").Document("Andijan");
            docref.DeleteAsync();
            MessageBox.Show("Deleted Successfully");
        }

        void Delete_Field_within_Document()
        {
            DocumentReference docref = database.Collection("MyCities").Document("Tashkent");
            Dictionary<string, object> data = new Dictionary<string, object>()
            {
                {"Population", FieldValue.Delete }
            };

            docref.UpdateAsync(data);
            MessageBox.Show("Deleted Successfully");
        }

        void Delete_Value_within_Document_List()
        {
            DocumentReference docref = database.Collection("Add_List").Document("firstList");
            Dictionary<string, object> data = new Dictionary<string, object>()
            {
                {"myList.PhoneNumber", FieldValue.Delete }
            };

            docref.UpdateAsync(data);
            MessageBox.Show("Deleted Successfully");
        }

        void Delete_Value_within_Document_Array()
        {
            DocumentReference docref = database.Collection("Add_Array").Document("firstArray");
            Dictionary<string, object> data = new Dictionary<string, object>()
            {
                {"myArray", FieldValue.ArrayRemove(1564, "olma") }
            };

            docref.UpdateAsync(data);
            MessageBox.Show("Deleted Successfully");
        }

        async void GetAllDocuments(string nameOfCollection)
        {
            Query cityque = database.Collection(nameOfCollection);
            QuerySnapshot snap = await cityque.GetSnapshotAsync();

            foreach (DocumentSnapshot docsnap in snap.Documents)
            {
                City city = docsnap.ConvertTo<City>();

                if (docsnap.Exists)
                {
                    dataGridView1.Rows.Add(docsnap.Id, city.Province, city.isCapital.ToString(), city.Population.ToString());
                }
            }
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
    }
}
